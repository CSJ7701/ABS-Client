name: Build and Release

on:
  push:
    tags:
      - 'v*' # Run when tag is pushed matching pattern v*, like v1.0.0

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create tag if it does not exist
        run: |
          if ! git rev-parse -q --verify "refs/tags/${{ github.ref_name }}"; then
            git tag ${{ github.ref_name }}
            git push origin ${{ github.ref_name }}
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-python-package:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
      - name: Build package
        run: poetry build
      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/abs_player-0.1.0-py3-none-any.whl
          asset_name: abs_player-0.1.0-py3-none-any.whl
          asset_content_type: application/octet-stream
      - name: Upload sdist to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/*.tar.gz
          asset_name: abs-player.tar.gz
          asset_content_type: application/gzip

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Upgrade dependencies
        run: |
          python -m pip install --upgrade pip pyinstaller rapidfuzz
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry pyinstaller
          poetry install
      - name: Build executable
        run: |
          poetry run pyinstaller --onefile --windowed --name=abs-player --add-data "styles;styles" app/App.py
      - name: Create Windows Installer
        run: |
          # Install Inno Setup (silent install)
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is.exe"
          Start-Process -FilePath "is.exe" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait
          
          # Create Inno Setup script
          Set-Content -Path "installer.iss" -Value @"
          [Setup]
          AppName=AudiobookShelf Player
          AppVersion=0.1.0
          DefaultDirName={autopf}\AudiobookShelf Player
          DefaultGroupName=AudiobookShelf Player
          OutputBaseFilename=abs-player-setup
          Compression=lzma
          SolidCompression=yes
          
          [Files]
          Source: "dist\abs-player.exe"; DestDir: "{app}"; Flags: ignoreversion
          
          [Icons]
          Name: "{group}\AudiobookShelf Player"; Filename: "{app}\abs-player.exe"
          Name: "{autoprograms}\AudiobookShelf Player"; Filename: "{app}\abs-player.exe"
          Name: "{autodesktop}\AudiobookShelf Player"; Filename: "{app}\abs-player.exe"
          "@
          
          # Run Inno Setup compiler
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./Output/abs-player-setup.exe
          asset_name: abs-player-setup.exe
          asset_content_type: application/octet-stream

  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry pyinstaller
          poetry install
          brew install create-dmg
      - name: Build .app bundle
        run: |
          poetry run pyinstaller --onefile --windowed --name="AudiobookShelf Player" --add-data "styles:styles" app/App.py
      - name: Create DMG
        run: |
          create-dmg \
            --volname "AudiobookShelf Player" \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "AudiobookShelf Player.app" 200 190 \
            --app-drop-link 600 185 \
            "AudiobookShelf-Player.dmg" \
            "dist/AudiobookShelf Player.app"
      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./AudiobookShelf-Player.dmg
          asset_name: AudiobookShelf-Player.dmg
          asset_content_type: application/octet-stream

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry pyinstaller
          sudo apt-get update
          sudo apt-get install -y libmpv-dev python3-pyqt6
          poetry install
      - name: Build AppImage
        run: |
          # Build binary with PyInstaller
          poetry run pyinstaller --onefile --name=abs-player --add-data "styles:styles" app/App.py
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary to AppDir
          cp dist/abs-player AppDir/usr/bin/
          
          # Create .desktop file
          cat > AppDir/usr/share/applications/abs-player.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=AudiobookShelf Player
          Exec=abs-player
          Icon=abs-player
          Comment=Client for AudiobookShelf server
          Categories=Audio;Player;
          EOF
          
          # Create a simple icon (replace with your actual icon)
          convert -size 256x256 xc:white -fill black -draw "circle 128,128 128,64" AppDir/usr/share/icons/hicolor/256x256/apps/abs-player.png
          
          # Download and use appimagetool
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage AppDir AudiobookShelf-Player.AppImage
      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./AudiobookShelf-Player.AppImage
          asset_name: AudiobookShelf-Player.AppImage
          asset_content_type: application/octet-stream
